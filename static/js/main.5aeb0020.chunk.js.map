{"version":3,"sources":["components/buttons/MainBtn.tsx","components/buttons/IconBtn.tsx","components/stages/Start.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["MainBtn","onClick","text","className","type","library","add","faArrowLeft","faArrowRight","faCog","IconBtn","icon","Start","startHandler","changeModeHandler","changeSpeedHandler","useState","showRules","setShowRules","showResults","setShowResults","showSettings","setShowSettings","getResults","setGetResults","mode","setMode","speed","setSpeed","useEffect","local","JSON","parse","localStorage","getItem","changeMode","num","changeSpeed","changeActive","changeActive2","map","i","index","name","correct","wrong","missed","uuidv4","soundC","Audio","soundW","colors","words","randomNumber","max","Math","floor","random","resultData","result","count","App","word","setWord","color","setColor","counter","setCounter","results","setResults","pressedKey","setPressedKey","littleCounter","setLittleCounter","inputValue","setInputValue","saveResults","setSaveResults","gameMode","setGameMode","gameSpeed","setGameSpeed","window","addEventListener","e","key","timer","setTimeout","clearTimeout","newArr","charAt","play","setItem","stringify","style","fontSize","placeholder","value","onChange","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5aeb0020.chunk.js","sourcesContent":["import React, { FC } from 'react';\r\n\r\ntype Props = {\r\n  onClick?: () => void;\r\n  text?: string;\r\n  className?: string;\r\n};\r\n\r\nconst MainBtn: FC<Props> = ({ onClick, text, className }) => {\r\n  return (\r\n    <>\r\n      <button className={`button ${className}`} type=\"button\" onClick={onClick}>\r\n        {text}\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainBtn;","import React, { FC } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { faArrowLeft, faArrowRight, faCog } from '@fortawesome/free-solid-svg-icons';\r\n\r\nlibrary.add(faArrowLeft, faArrowRight, faCog);\r\n\r\ntype Props = {\r\n  onClick: () => void;\r\n  className: string;\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  icon?: any;\r\n};\r\n\r\nconst IconBtn: FC<Props> = ({ onClick, className, icon }) => {\r\n  return (\r\n    <>\r\n      <button className={className} type=\"button\" onClick={onClick}>\r\n        <FontAwesomeIcon icon={icon} className='icon' />\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default IconBtn;\r\n","import React, { FC, useEffect, useState } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport MainBtn from '../buttons/MainBtn';\r\nimport IconBtn from '../buttons/IconBtn';\r\nimport './Start.scss';\r\n\r\n\r\ntype Props = {\r\n  startHandler: () => void;\r\n  changeModeHandler: (num: number) => void;\r\n  changeSpeedHandler: (num: number) => void;\r\n};\r\n\r\ntype SaveResults = {\r\n  name: string;\r\n  correct: number;\r\n  wrong: number;\r\n  missed: number;\r\n}[];\r\n\r\nconst Start: FC<Props> = ({\r\n  startHandler,\r\n  changeModeHandler,\r\n  changeSpeedHandler,\r\n}) => {\r\n  const [showRules, setShowRules] = useState(false);\r\n  const [showResults, setShowResults] = useState(false);\r\n  const [showSettings, setShowSettings] = useState(false);\r\n  const [getResults, setGetResults] = useState<SaveResults>([]);\r\n  const [mode, setMode] = useState(10);\r\n  const [speed, setSpeed] = useState(2000);\r\n\r\n  useEffect(() => {\r\n    // @ts-ignore\r\n    const local = JSON.parse(localStorage.getItem('results'));\r\n    // @ts-ignore\r\n    setGetResults(...getResults, local);\r\n  }, []);\r\n\r\n\r\n  const changeMode = (num: number) => changeModeHandler(num);\r\n  const changeSpeed = (num: number) => changeSpeedHandler(num);\r\n  const changeActive = (num: number) => setMode(num);\r\n  const changeActive2 = (num: number) => setSpeed(num);\r\n\r\n  return (\r\n    <div className=\"start\">\r\n      <h2> Stroop Game</h2>\r\n      <MainBtn\r\n        text=\"Results\"\r\n        onClick={() => {\r\n          setShowRules(false);\r\n          setShowSettings(false);\r\n          setShowResults(!showResults);\r\n        }}\r\n      />\r\n      \r\n      <MainBtn\r\n        className=\"button--play\"\r\n        text=\"PLAY\"\r\n        onClick={startHandler}\r\n      />\r\n      <MainBtn\r\n        text=\"Rules\"\r\n        onClick={() => {\r\n          setShowResults(false);\r\n          setShowSettings(false);\r\n          setShowRules(!showRules);\r\n        }}\r\n      />\r\n      <IconBtn\r\n        icon='cog'\r\n        className=\"button--setting\"\r\n        onClick={() => {\r\n          setShowRules(false);\r\n          setShowResults(false);\r\n          setShowSettings(!showSettings);\r\n        }}\r\n      />\r\n       \r\n\r\n      {showRules && (\r\n        <div className=\"rules\">\r\n          <h1 className=\"heading\"> How To Play </h1>\r\n          <p className=\"rules__text\">\r\n            <span className=\"color-r\">GREEN</span> {'-> press'}\r\n            <MainBtn className=\"button--key\" text=\"R\" />\r\n            beacuse the ink is red\r\n          </p>\r\n          <p>\r\n            <span className=\"color-g\">BLUE</span> {'-> press'}\r\n            <MainBtn className=\"button--key\" text=\"G\" />\r\n            beacuse the ink is green\r\n          </p>\r\n          <p>\r\n            <span className=\"color-b\">YELLOW</span> {'-> press'}\r\n            <MainBtn className=\"button--key\" text=\"B\" />\r\n            beacuse the ink is blue\r\n          </p>\r\n          <p>\r\n            <span className=\"color-y\">RED</span> {'-> press'}\r\n            <MainBtn className=\"button--key\" text=\"Y\" />\r\n            beacuse the ink is yellow\r\n          </p>\r\n        </div>\r\n      )}\r\n\r\n      {showResults && (\r\n        <div className=\"results\">\r\n          <h1 className=\"heading\"> Latest results </h1>\r\n          <table className=\"table\">\r\n            <thead>\r\n              <tr>\r\n                <th>No.</th>\r\n                <th>Name</th>\r\n                <th>Correct</th>\r\n                <th>Wrong</th>\r\n                <th>Missed</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {getResults.map((i, index) => {\r\n                return (\r\n                  <tr key={uuidv4()}>\r\n                    <td>{index + 1}</td>\r\n                    <td>{i.name}</td>\r\n                    <td>{i.correct}</td>\r\n                    <td>{i.wrong}</td>\r\n                    <td>{i.missed}</td>\r\n                  </tr>\r\n                );\r\n              })}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )}\r\n\r\n      {showSettings && (\r\n        <div className=\"setup\">\r\n          <div className=\"setup--wrapper\">\r\n            <h3>Game mode</h3>\r\n            <div className=\"setup--buttons\">\r\n              <MainBtn\r\n                text=\"Short\"\r\n                className={`button button--set ${mode === 10 && 'active'}`}\r\n                onClick={() => {\r\n                  changeMode(10);\r\n                  changeActive(10);\r\n                }}\r\n              />\r\n              <MainBtn\r\n                text=\"Medium\"\r\n                className={`button button--set ${mode === 20 && 'active'}`}\r\n                onClick={() => {\r\n                  changeMode(20);\r\n                  changeActive(20);\r\n                }}\r\n              />\r\n              <MainBtn\r\n                text=\"Long\"\r\n                className={`button button--set ${mode === 30 && 'active'}`}\r\n                onClick={() => {\r\n                  changeMode(30);\r\n                  changeActive(30);\r\n                }}\r\n              />\r\n            </div>\r\n            <h3>Speed</h3>\r\n            <div className=\"setup--buttons\">\r\n              <MainBtn\r\n                text=\"Slow\"\r\n                className={`button button--set ${speed === 3000 && 'active'}`}\r\n                onClick={() => {\r\n                  changeSpeed(3000);\r\n                  changeActive2(3000);\r\n                }}\r\n              />\r\n              <MainBtn\r\n                text=\"Medium\"\r\n                className={`button button--set ${speed === 2000 && 'active'}`}\r\n                onClick={() => {\r\n                  changeSpeed(2000);\r\n                  changeActive2(2000);\r\n                }}\r\n              />\r\n              <MainBtn\r\n                text=\"Fast\"\r\n                className={`button button--set ${speed === 1000 && 'active'}`}\r\n                onClick={() => {\r\n                  changeSpeed(1000);\r\n                  changeActive2(1000);\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Start;\r\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport 'flexboxgrid';\nimport Start from './components/stages/Start';\nimport IconBtn from './components/buttons/IconBtn';\n\nconst soundC = new Audio('../public/correct.mp3');\nconst soundW = new Audio('../public/wrong.mp3');\n\nconst colors = ['red', 'green', 'blue', 'yellow'];\nconst words = ['RED', 'GREEN', 'BLUE', 'YELLOW'];\n\nconst randomNumber = (max: number) => {\n  return Math.floor(Math.random() * max);\n};\n\ntype Results = {\n  result: string;\n  count: number;\n}[];\n\nconst resultData = [\n  {\n    result: 'correct',\n    count: 0,\n  },\n  {\n    result: 'wrong',\n    count: 0,\n  },\n  {\n    result: 'missed',\n    count: 0,\n  },\n];\n\ntype SaveResults = {\n  name: string;\n  correct: number;\n  wrong: number;\n  missed: number;\n}[];\n\nconst App = () => {\n  const [word, setWord] = useState(words[randomNumber(4)]); // konkrētais vārds\n  const [color, setColor] = useState(colors[randomNumber(4)]); // konkrētā krāsa\n  const [counter, setCounter] = useState(-2); // ik 2 sec mainās krāsa\n  const [results, setResults] = useState<Results>(resultData);\n  const [pressedKey, setPressedKey] = useState('');\n  const [littleCounter, setLittleCounter] = useState(-1); // little timer, that sets the big timer\n  const [inputValue, setInputValue] = useState('');\n  const [saveResults, setSaveResults] = useState<SaveResults>([]);\n  const [gameMode, setGameMode] = useState(10); // game mode - default 10x color change\n  const [gameSpeed, setGameSpeed] = useState(2000); // game speed - default 2s\n\n  // REGISTER PRESSED KEY\n  useEffect(() => {\n    window.addEventListener('keydown', (e) => {\n      setPressedKey(e.key);\n    });\n  }, [counter]);\n\n  // SETS OFF THE BIG TIMER\n  useEffect(() => {\n    if (littleCounter === 0) {\n      setCounter(gameMode);\n    }\n  }, [littleCounter]);\n\n  // LITTLE TIMER\n  useEffect(() => {\n    // @ts-ignore\n    let timer;\n    if (littleCounter > 0) {\n      timer = setTimeout(() => {\n        setLittleCounter(littleCounter - 1);\n      }, 1000);\n    }\n    // @ts-ignore\n    return () => clearTimeout(timer);\n  }, [littleCounter]);\n\n  // BIG TIMER\n  useEffect(() => {\n    // @ts-ignore\n    let timer;\n    if (counter > 0) {\n      timer = setTimeout(() => {\n        setWord(words[randomNumber(4)]);\n        setColor(colors[randomNumber(4)]);\n        setCounter(counter - 1);\n        setPressedKey('');\n      }, gameSpeed);\n    }\n    // @ts-ignore\n    return () => clearTimeout(timer);\n  }, [counter]);\n\n  // COMPARE DATA AND SETS RESULTS\n  useEffect(() => {\n    if (counter > 0) {\n      const newArr = [...results];\n      if (pressedKey === color.charAt(0)) {\n        newArr[0].count += 1;\n        soundC.play();\n      } else if (pressedKey !== '') {\n        newArr[1].count += 1;\n        soundW.play();\n      }\n      newArr[2].count = gameMode - (newArr[1].count + newArr[0].count);\n      newArr[2].count < 0 && (newArr[2].count = 0);\n      setResults(newArr);\n    }\n  }, [pressedKey]);\n\n  // SAVES RESULTS\n  const saveResultsHandler = () => {\n    setSaveResults([\n      ...saveResults,\n      {\n        name: inputValue,\n        correct: results[0].count,\n        wrong: results[1].count,\n        missed: results[2].count,\n      },\n    ]);\n    setInputValue('');\n  };\n\n  // SAVES RESULTS IN LOCAL STORAGE\n  useEffect(() => {\n    localStorage.setItem('results', JSON.stringify(saveResults));\n  }, [saveResults]);\n\n  // SETS GAME MODE  10 / 25 /40\n  const changeModeHandler = (num: number) => {\n    setGameMode(num);\n  };\n\n  // SETS GAME SPEED  1s / 2s / 3s\n  const changeSpeedHandler = (num: number) => {\n    setGameSpeed(num);\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"container\">\n        <div className=\"row center-xs\">\n          <div className=\"col-xs-12\">\n            {littleCounter < 0 && counter < -1 && (\n              <Start\n                changeSpeedHandler={(num) => changeSpeedHandler(num)}\n                changeModeHandler={(num) => changeModeHandler(num)}\n                startHandler={() => {\n                  setLittleCounter(3);\n                }}\n              />\n            )}\n          </div>\n        </div>\n\n        <div className=\"row center-xs\">\n          <div className=\"col-xs-12\">\n            {littleCounter >= 0 && counter !== 0 && (\n              <>\n                {littleCounter > 0 ? (\n                  <h2>{littleCounter}</h2>\n                ) : (\n                  <>\n                    <h3 className=\"counter\">{counter}</h3>\n                    <h1 style={{ color: `${color}`, fontSize: '70px' }}>\n                      {word}\n                    </h1>\n         \n                    <IconBtn\n                      className=\"button--icon button--icon-return\"\n                      icon='arrow-left'\n                      onClick={() => {\n                        setCounter(-2);\n                        setLittleCounter(-1);\n                      }}\n                    />\n                    <IconBtn\n                      className=\"button--icon button--icon-skip\"\n                      icon='arrow-right'\n                      onClick={() => {\n                        setCounter(0);\n                        setLittleCounter(0);\n                      }}\n                    />\n                  </>\n                )}\n              </>\n            )}\n\n            {counter === 0 && (\n              <>\n                <h3>Correct : {results[0].count}</h3>\n                <h3>Wrong : {results[1].count}</h3>\n                <h3>Missed : {results[2].count}</h3>\n                <br />\n                <h5>Save your results</h5>\n                <input\n                  type=\"text\"\n                  placeholder=\"Enter your name\"\n                  className=\"input\"\n                  value={inputValue}\n                  onChange={(e) => setInputValue(e.target.value)}\n                />\n                <button\n                  type=\"button\"\n                  className=\"button--save\"\n                  onClick={saveResultsHandler}\n                >\n                  SAVE\n                </button>\n                <IconBtn\n                  className=\"button--icon button--icon-return\"\n                  icon='arrow-left'\n                  onClick={() => {\n                    setCounter(-2);\n                    setLittleCounter(-1);\n                  }}\n                />\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}